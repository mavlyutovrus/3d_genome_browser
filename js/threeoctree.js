(function(THREE){"use strict";function isNumber(n){return!isNaN(n)&&isFinite(n);}
function isArray(target){return Object.prototype.toString.call(target)==='[object Array]';}
function toArray(target){return target?(isArray(target)!==true?[target]:target):[];}
function indexOfValue(array,value){for(var i=0,il=array.length;i<il;i++){if(array[i]===value){return i;}}
return-1;}
function indexOfPropertyWithValue(array,property,value){for(var i=0,il=array.length;i<il;i++){if(array[i][property]===value){return i;}}
return-1;}
THREE.Octree=function(parameters){parameters=parameters||{};parameters.tree=this;this.nodeCount=0;this.INDEX_INSIDE_CROSS=-1;this.INDEX_OUTSIDE_OFFSET=2;this.INDEX_OUTSIDE_POS_X=isNumber(parameters.INDEX_OUTSIDE_POS_X)?parameters.INDEX_OUTSIDE_POS_X:0;this.INDEX_OUTSIDE_NEG_X=isNumber(parameters.INDEX_OUTSIDE_NEG_X)?parameters.INDEX_OUTSIDE_NEG_X:1;this.INDEX_OUTSIDE_POS_Y=isNumber(parameters.INDEX_OUTSIDE_POS_Y)?parameters.INDEX_OUTSIDE_POS_Y:2;this.INDEX_OUTSIDE_NEG_Y=isNumber(parameters.INDEX_OUTSIDE_NEG_Y)?parameters.INDEX_OUTSIDE_NEG_Y:3;this.INDEX_OUTSIDE_POS_Z=isNumber(parameters.INDEX_OUTSIDE_POS_Z)?parameters.INDEX_OUTSIDE_POS_Z:4;this.INDEX_OUTSIDE_NEG_Z=isNumber(parameters.INDEX_OUTSIDE_NEG_Z)?parameters.INDEX_OUTSIDE_NEG_Z:5;this.INDEX_OUTSIDE_MAP=[];this.INDEX_OUTSIDE_MAP[this.INDEX_OUTSIDE_POS_X]={index:this.INDEX_OUTSIDE_POS_X,count:0,x:1,y:0,z:0};this.INDEX_OUTSIDE_MAP[this.INDEX_OUTSIDE_NEG_X]={index:this.INDEX_OUTSIDE_NEG_X,count:0,x:-1,y:0,z:0};this.INDEX_OUTSIDE_MAP[this.INDEX_OUTSIDE_POS_Y]={index:this.INDEX_OUTSIDE_POS_Y,count:0,x:0,y:1,z:0};this.INDEX_OUTSIDE_MAP[this.INDEX_OUTSIDE_NEG_Y]={index:this.INDEX_OUTSIDE_NEG_Y,count:0,x:0,y:-1,z:0};this.INDEX_OUTSIDE_MAP[this.INDEX_OUTSIDE_POS_Z]={index:this.INDEX_OUTSIDE_POS_Z,count:0,x:0,y:0,z:1};this.INDEX_OUTSIDE_MAP[this.INDEX_OUTSIDE_NEG_Z]={index:this.INDEX_OUTSIDE_NEG_Z,count:0,x:0,y:0,z:-1};this.FLAG_POS_X=1<<(this.INDEX_OUTSIDE_POS_X+1);this.FLAG_NEG_X=1<<(this.INDEX_OUTSIDE_NEG_X+1);this.FLAG_POS_Y=1<<(this.INDEX_OUTSIDE_POS_Y+1);this.FLAG_NEG_Y=1<<(this.INDEX_OUTSIDE_NEG_Y+1);this.FLAG_POS_Z=1<<(this.INDEX_OUTSIDE_POS_Z+1);this.FLAG_NEG_Z=1<<(this.INDEX_OUTSIDE_NEG_Z+1);this.utilVec31Search=new THREE.Vector3();this.utilVec32Search=new THREE.Vector3();this.scene=parameters.scene;if(this.scene){this.visualGeometry=new THREE.CubeGeometry(1,1,1);this.visualMaterial=new THREE.MeshBasicMaterial({color:0xFF0066,wireframe:true,wireframeLinewidth:1});}
this.objects=[];this.objectsMap={};this.objectsData=[];this.objectsDeferred=[];this.depthMax=isNumber(parameters.depthMax)?parameters.depthMax:Infinity;this.objectsThreshold=isNumber(parameters.objectsThreshold)?parameters.objectsThreshold:8;this.overlapPct=isNumber(parameters.overlapPct)?parameters.overlapPct:0.15;this.undeferred=parameters.undeferred||false;this.root=parameters.root instanceof THREE.OctreeNode?parameters.root:new THREE.OctreeNode(parameters);};THREE.Octree.prototype={update:function(){if(this.objectsDeferred.length>0){for(var i=0,il=this.objectsDeferred.length;i<il;i++){var deferred=this.objectsDeferred[i];this.addDeferred(deferred.object,deferred.options);}
this.objectsDeferred.length=0;}},add:function(object,options){if(this.undeferred){this.updateObject(object);this.addDeferred(object,options);}else{this.objectsDeferred.push({object:object,options:options});}},addDeferred:function(object,options){var i,l,geometry,faces,useFaces,vertices,useVertices,trackPoints,useSeqVertices,objectData;if(object instanceof THREE.OctreeObjectData){object=object.object;}
if(!object.uuid){object.uuid=THREE.Math.generateUUID();}
if(!this.objectsMap[object.uuid]){this.objects.push(object);this.objectsMap[object.uuid]=object;if(options){useFaces=options.useFaces;useVertices=options.useVertices;useSeqVertices=options.useSeqVertices;}
if(useSeqVertices===true){geometry=object.geometry;vertices=geometry.vertices;for(i=0,l=vertices.length;i<l;i++){if(i%4==2){this.addObjectData(object,vertices[i]);}}}else if(useVertices===true){geometry=object.geometry;vertices=geometry.vertices;for(i=0,l=vertices.length;i<l;i++){this.addObjectData(object,vertices[i]);}}else if(useFaces===true){geometry=object.geometry;faces=geometry.faces;for(i=0,l=faces.length;i<l;i++){this.addObjectData(object,faces[i]);}}else{this.addObjectData(object);}}},addObjectData:function(object,part){var objectData=new THREE.OctreeObjectData(object,part);this.objectsData.push(objectData);this.root.addObject(objectData);},remove:function(object){var i,l,objectData=object,index,objectsDataRemoved;if(object instanceof THREE.OctreeObjectData){object=object.object;}
if(this.objectsMap[object.uuid]){this.objectsMap[object.uuid]=undefined;index=indexOfValue(this.objects,object);if(index!==-1){this.objects.splice(index,1);objectsDataRemoved=this.root.removeObject(objectData);for(i=0,l=objectsDataRemoved.length;i<l;i++){objectData=objectsDataRemoved[i];index=indexOfValue(this.objectsData,objectData);if(index!==-1){this.objectsData.splice(index,1);}}}}else if(this.objectsDeferred.length>0){index=indexOfPropertyWithValue(this.objectsDeferred,'object',object);if(index!==-1){this.objectsDeferred.splice(index,1);}}},extend:function(octree){var i,l,objectsData,objectData;if(octree instanceof THREE.Octree){objectsData=octree.objectsData;for(i=0,l=objectsData.length;i<l;i++){objectData=objectsData[i];this.add(objectData,{useFaces:objectData.faces,useVertices:objectData.vertices});}}},rebuild:function(){var i,l,node,object,objectData,indexOctant,indexOctantLast,objectsUpdate=[];for(i=0,l=this.objectsData.length;i<l;i++){objectData=this.objectsData[i];node=objectData.node;objectData.update();if(node instanceof THREE.OctreeNode&&!objectData.positionLast.equals(objectData.position)){indexOctantLast=objectData.indexOctant;indexOctant=node.getOctantIndex(objectData);if(indexOctant!==indexOctantLast){objectsUpdate.push(objectData);}}}
for(i=0,l=objectsUpdate.length;i<l;i++){objectData=objectsUpdate[i];objectData.node.removeObject(objectData);this.root.addObject(objectData);}},updateObject:function(object){var i,l,parentCascade=[object],parent,parentUpdate;parent=object.parent;while(parent){parentCascade.push(parent);parent=parent.parent;}
for(i=0,l=parentCascade.length;i<l;i++){parent=parentCascade[i];if(parent.matrixWorldNeedsUpdate===true){parentUpdate=parent;}}
if(typeof parentUpdate!=='undefined'){parentUpdate.updateMatrixWorld();}},search:function(position,radius,organizeByObject,direction){var i,l,node,objects,objectData,object,results,resultData,resultsObjectsIndices,resultObjectIndex,directionPct;objects=[].concat(this.root.objects);if(!(radius>0)){radius=Number.MAX_VALUE;}
if(direction instanceof THREE.Vector3){direction=this.utilVec31Search.copy(direction).normalize();directionPct=this.utilVec32Search.set(1,1,1).divide(direction);}
for(i=0,l=this.root.nodesIndices.length;i<l;i++){node=this.root.nodesByIndex[this.root.nodesIndices[i]];objects=node.search(position,radius,objects,direction,directionPct);}
if(organizeByObject===true){results=[];resultsObjectsIndices=[];for(i=0,l=objects.length;i<l;i++){objectData=objects[i];object=objectData.object;resultObjectIndex=indexOfValue(resultsObjectsIndices,object);if(resultObjectIndex===-1){resultData={object:object,faces:[],vertices:[]};results.push(resultData);resultsObjectsIndices.push(object);}else{resultData=results[resultObjectIndex];}
if(objectData.faces){resultData.faces.push(objectData.faces);}else if(objectData.vertices){resultData.vertices.push(objectData.vertices);}}}else{results=objects;}
return results;},setRoot:function(root){if(root instanceof THREE.OctreeNode){this.root=root;this.root.updateProperties();}},getDepthEnd:function(){return this.root.getDepthEnd();},getNodeCountEnd:function(){return this.root.getNodeCountEnd();},getObjectCountEnd:function(){return this.root.getObjectCountEnd();},toConsole:function(){this.root.toConsole();}};THREE.OctreeObjectData=function(object,part){this.object=object;if(part instanceof THREE.Face3){this.faces=part;this.face3=true;this.utilVec31FaceBounds=new THREE.Vector3();}else if(part instanceof THREE.Face4){this.face4=true;this.faces=part;this.utilVec31FaceBounds=new THREE.Vector3();}else if(part instanceof THREE.Vector3){this.vertices=part;}
this.radius=0;this.position=new THREE.Vector3();if(this.object instanceof THREE.Object3D){this.update();}
this.positionLast=this.position.clone();};THREE.OctreeObjectData.prototype={update:function(){if(this.face3){this.radius=this.getFace3BoundingRadius(this.object,this.faces);this.position.copy(this.faces.centroid).applyMatrix4(this.object.matrixWorld);}else if(this.face4){this.radius=this.getFace4BoundingRadius(this.object,this.faces);this.position.copy(this.faces.centroid).applyMatrix4(this.object.matrixWorld);}else if(this.vertices){this.radius=this.object.material.size||1;this.position.copy(this.vertices).applyMatrix4(this.object.matrixWorld);}else{if(this.object.geometry){if(this.object.geometry.boundingSphere===null){this.object.geometry.computeBoundingSphere();}
this.radius=this.object.geometry.boundingSphere.radius;this.position.copy(this.object.geometry.boundingSphere.center).applyMatrix4(this.object.matrixWorld);}else{this.radius=this.object.boundRadius;this.position.getPositionFromMatrix(this.object.matrixWorld);}}
this.radius=this.radius*Math.max(this.object.scale.x,this.object.scale.y,this.object.scale.z);},getFace3BoundingRadius:function(object,face){var geometry=object.geometry||object,vertices=geometry.vertices,centroid=face.centroid,va=vertices[face.a],vb=vertices[face.b],vc=vertices[face.c],centroidToVert=this.utilVec31FaceBounds,radius;centroid.addVectors(va,vb).add(vc).divideScalar(3);radius=Math.max(centroidToVert.subVectors(centroid,va).length(),centroidToVert.subVectors(centroid,vb).length(),centroidToVert.subVectors(centroid,vc).length());return radius;},getFace4BoundingRadius:function(object,face){var geometry=object.geometry||object,vertices=geometry.vertices,centroid=face.centroid,va=vertices[face.a],vb=vertices[face.b],vc=vertices[face.c],vd=vertices[face.d],centroidToVert=this.utilVec31FaceBounds,radius;centroid.addVectors(va,vb).add(vc).add(vd).divideScalar(4);radius=Math.max(centroidToVert.subVectors(centroid,va).length(),centroidToVert.subVectors(centroid,vb).length(),centroidToVert.subVectors(centroid,vc).length(),centroidToVert.subVectors(centroid,vd).length());return radius;}};THREE.OctreeNode=function(parameters){this.utilVec31Branch=new THREE.Vector3();this.utilVec31Expand=new THREE.Vector3();this.utilVec31Ray=new THREE.Vector3();parameters=parameters||{};if(parameters.tree instanceof THREE.Octree){this.tree=parameters.tree;}else if(parameters.parent instanceof THREE.OctreeNode!==true){parameters.root=this;this.tree=new THREE.Octree(parameters);}
this.id=this.tree.nodeCount++;this.position=parameters.position instanceof THREE.Vector3?parameters.position:new THREE.Vector3();this.radius=parameters.radius>0?parameters.radius:1;this.indexOctant=parameters.indexOctant;this.depth=0;this.reset();this.setParent(parameters.parent);this.overlap=this.radius*this.tree.overlapPct;this.radiusOverlap=this.radius+this.overlap;this.left=this.position.x-this.radiusOverlap;this.right=this.position.x+this.radiusOverlap;this.bottom=this.position.y-this.radiusOverlap;this.top=this.position.y+this.radiusOverlap;this.back=this.position.z-this.radiusOverlap;this.front=this.position.z+this.radiusOverlap;if(this.tree.scene){this.visual=new THREE.Mesh(this.tree.visualGeometry,this.tree.visualMaterial);this.visual.scale.set(this.radiusOverlap*2,this.radiusOverlap*2,this.radiusOverlap*2);this.visual.position.copy(this.position);this.tree.scene.add(this.visual);}};THREE.OctreeNode.prototype={setParent:function(parent){if(parent!==this&&this.parent!==parent){this.parent=parent;this.updateProperties();}},updateProperties:function(){var i,l;if(this.parent instanceof THREE.OctreeNode){this.tree=this.parent.tree;this.depth=this.parent.depth+1;}else{this.depth=0;}
for(i=0,l=this.nodesIndices.length;i<l;i++){this.nodesByIndex[this.nodesIndices[i]].updateProperties();}},reset:function(cascade,removeVisual){var i,l,node,nodesIndices=this.nodesIndices||[],nodesByIndex=this.nodesByIndex;this.objects=[];this.nodesIndices=[];this.nodesByIndex={};for(i=0,l=nodesIndices.length;i<l;i++){node=nodesByIndex[nodesIndices[i]];node.setParent(undefined);if(cascade===true){node.reset(cascade,removeVisual);}}
if(removeVisual===true&&this.visual&&this.visual.parent){this.visual.parent.remove(this.visual);}},addNode:function(node,indexOctant){node.indexOctant=indexOctant;if(indexOfValue(this.nodesIndices,indexOctant)===-1){this.nodesIndices.push(indexOctant);}
this.nodesByIndex[indexOctant]=node;if(node.parent!==this){node.setParent(this);}},removeNode:function(indexOctant){var index,node;index=indexOfValue(this.nodesIndices,indexOctant);this.nodesIndices.splice(index,1);node=node||this.nodesByIndex[indexOctant];delete this.nodesByIndex[indexOctant];if(node.parent===this){node.setParent(undefined);}},addObject:function(object){var index,indexOctant,node;indexOctant=this.getOctantIndex(object);if(indexOctant>-1&&this.nodesIndices.length>0){node=this.branch(indexOctant);node.addObject(object);}else if(indexOctant<-1&&this.parent instanceof THREE.OctreeNode){this.parent.addObject(object);}else{index=indexOfValue(this.objects,object);if(index===-1){this.objects.push(object);}
object.node=this;this.checkGrow();}},addObjectWithoutCheck:function(objects){var i,l,object;for(i=0,l=objects.length;i<l;i++){object=objects[i];this.objects.push(object);object.node=this;}},removeObject:function(object){var i,l,nodesRemovedFrom,removeData;removeData=this.removeObjectRecursive(object,{searchComplete:false,nodesRemovedFrom:[],objectsDataRemoved:[]});nodesRemovedFrom=removeData.nodesRemovedFrom;if(nodesRemovedFrom.length>0){for(i=0,l=nodesRemovedFrom.length;i<l;i++){nodesRemovedFrom[i].shrink();}}
return removeData.objectsDataRemoved;},removeObjectRecursive:function(object,removeData){var i,l,index=-1,objectData,node,objectRemoved;if(object instanceof THREE.OctreeObjectData){index=indexOfValue(this.objects,object);if(index!==-1){this.objects.splice(index,1);object.node=undefined;removeData.objectsDataRemoved.push(object);removeData.searchComplete=objectRemoved=true;}}else{for(i=this.objects.length-1;i>=0;i--){objectData=this.objects[i];if(objectData.object===object){this.objects.splice(i,1);objectData.node=undefined;removeData.objectsDataRemoved.push(objectData);objectRemoved=true;if(!objectData.faces&&!objectData.vertices){removeData.searchComplete=true;break;}}}}
if(objectRemoved===true){removeData.nodesRemovedFrom.push(this);}
if(removeData.searchComplete!==true){for(i=0,l=this.nodesIndices.length;i<l;i++){node=this.nodesByIndex[this.nodesIndices[i]];removeData=node.removeObjectRecursive(object,removeData);if(removeData.searchComplete===true){break;}}}
return removeData;},checkGrow:function(){if(this.objects.length>this.tree.objectsThreshold&&this.tree.objectsThreshold>0){this.grow();}},grow:function(){var indexOctant,object,objectsExpand=[],objectsExpandOctants=[],objectsSplit=[],objectsSplitOctants=[],objectsRemaining=[],i,l;for(i=0,l=this.objects.length;i<l;i++){object=this.objects[i];indexOctant=this.getOctantIndex(object);if(indexOctant>-1){objectsSplit.push(object);objectsSplitOctants.push(indexOctant);}else if(indexOctant<-1){objectsExpand.push(object);objectsExpandOctants.push(indexOctant);}else{objectsRemaining.push(object);}}
if(objectsSplit.length>0){objectsRemaining=objectsRemaining.concat(this.split(objectsSplit,objectsSplitOctants));}
if(objectsExpand.length>0){objectsRemaining=objectsRemaining.concat(this.expand(objectsExpand,objectsExpandOctants));}
this.objects=objectsRemaining;this.checkMerge();},split:function(objects,octants){var i,l,indexOctant,object,node,objectsRemaining;if(this.depth<this.tree.depthMax){objects=objects||this.objects;octants=octants||[];objectsRemaining=[];for(i=0,l=objects.length;i<l;i++){object=objects[i];indexOctant=octants[i];if(indexOctant>-1){node=this.branch(indexOctant);node.addObject(object);}else{objectsRemaining.push(object);}}
if(objects===this.objects){this.objects=objectsRemaining;}}else{objectsRemaining=this.objects;}
return objectsRemaining;},branch:function(indexOctant){var node,overlap,radius,radiusOffset,offset,position;if(this.nodesByIndex[indexOctant]instanceof THREE.OctreeNode){node=this.nodesByIndex[indexOctant];}else{radius=(this.radiusOverlap)*0.5;overlap=radius*this.tree.overlapPct;radiusOffset=radius-overlap;offset=this.utilVec31Branch.set(indexOctant&1?radiusOffset:-radiusOffset,indexOctant&2?radiusOffset:-radiusOffset,indexOctant&4?radiusOffset:-radiusOffset);position=new THREE.Vector3().addVectors(this.position,offset);node=new THREE.OctreeNode({tree:this.tree,parent:this,position:position,radius:radius,indexOctant:indexOctant});this.addNode(node,indexOctant);}
return node;},expand:function(objects,octants){var i,l,object,objectsRemaining,objectsExpand,indexOctant,flagsOutside,indexOutside,indexOctantInverse,iom=this.tree.INDEX_OUTSIDE_MAP,indexOutsideCounts,infoIndexOutside1,infoIndexOutside2,infoIndexOutside3,indexOutsideBitwise1,indexOutsideBitwise2,infoPotential1,infoPotential2,infoPotential3,indexPotentialBitwise1,indexPotentialBitwise2,octantX,octantY,octantZ,overlap,radius,radiusOffset,radiusParent,overlapParent,offset=this.utilVec31Expand,position,parent;if(this.tree.root.getDepthEnd()<this.tree.depthMax){objects=objects||this.objects;octants=octants||[];objectsRemaining=[];objectsExpand=[];for(i=0,l=iom.length;i<l;i++){iom[i].count=0;}
for(i=0,l=objects.length;i<l;i++){object=objects[i];indexOctant=octants[i];if(indexOctant<-1){flagsOutside=-indexOctant-this.tree.INDEX_OUTSIDE_OFFSET;if(flagsOutside&this.tree.FLAG_POS_X){iom[this.tree.INDEX_OUTSIDE_POS_X].count++;}else if(flagsOutside&this.tree.FLAG_NEG_X){iom[this.tree.INDEX_OUTSIDE_NEG_X].count++;}
if(flagsOutside&this.tree.FLAG_POS_Y){iom[this.tree.INDEX_OUTSIDE_POS_Y].count++;}else if(flagsOutside&this.tree.FLAG_NEG_Y){iom[this.tree.INDEX_OUTSIDE_NEG_Y].count++;}
if(flagsOutside&this.tree.FLAG_POS_Z){iom[this.tree.INDEX_OUTSIDE_POS_Z].count++;}else if(flagsOutside&this.tree.FLAG_NEG_Z){iom[this.tree.INDEX_OUTSIDE_NEG_Z].count++;}
objectsExpand.push(object);}else{objectsRemaining.push(object);}}
if(objectsExpand.length>0){indexOutsideCounts=iom.slice(0);indexOutsideCounts.sort(function(a,b){return b.count-a.count;});infoIndexOutside1=indexOutsideCounts[0];indexOutsideBitwise1=infoIndexOutside1.index|1;infoPotential1=indexOutsideCounts[1];infoPotential2=indexOutsideCounts[2];infoIndexOutside2=(infoPotential1.index|1)!==indexOutsideBitwise1?infoPotential1:infoPotential2;indexOutsideBitwise2=infoIndexOutside2.index|1;infoPotential1=indexOutsideCounts[2];infoPotential2=indexOutsideCounts[3];infoPotential3=indexOutsideCounts[4];indexPotentialBitwise1=infoPotential1.index|1;indexPotentialBitwise2=infoPotential2.index|1;infoIndexOutside3=indexPotentialBitwise1!==indexOutsideBitwise1&&indexPotentialBitwise1!==indexOutsideBitwise2?infoPotential1:indexPotentialBitwise2!==indexOutsideBitwise1&&indexPotentialBitwise2!==indexOutsideBitwise2?infoPotential2:infoPotential3;octantX=infoIndexOutside1.x+infoIndexOutside2.x+infoIndexOutside3.x;octantY=infoIndexOutside1.y+infoIndexOutside2.y+infoIndexOutside3.y;octantZ=infoIndexOutside1.z+infoIndexOutside2.z+infoIndexOutside3.z;indexOctant=this.getOctantIndexFromPosition(octantX,octantY,octantZ);indexOctantInverse=this.getOctantIndexFromPosition(-octantX,-octantY,-octantZ);overlap=this.overlap;radius=this.radius;radiusParent=this.tree.overlapPct>0?overlap/((0.5*this.tree.overlapPct)*(1+this.tree.overlapPct)):radius*2;overlapParent=radiusParent*this.tree.overlapPct;radiusOffset=(radiusParent+overlapParent)-(radius+overlap);offset.set(indexOctant&1?radiusOffset:-radiusOffset,indexOctant&2?radiusOffset:-radiusOffset,indexOctant&4?radiusOffset:-radiusOffset);position=new THREE.Vector3().addVectors(this.position,offset);parent=new THREE.OctreeNode({tree:this.tree,position:position,radius:radiusParent});parent.addNode(this,indexOctantInverse);this.tree.setRoot(parent);for(i=0,l=objectsExpand.length;i<l;i++){this.tree.root.addObject(objectsExpand[i]);}}
if(objects===this.objects){this.objects=objectsRemaining;}}else{objectsRemaining=objects;}
return objectsRemaining;},shrink:function(){this.checkMerge();this.tree.root.checkContract();},checkMerge:function(){var nodeParent=this,nodeMerge;while(nodeParent.parent instanceof THREE.OctreeNode&&nodeParent.getObjectCountEnd()<this.tree.objectsThreshold){nodeMerge=nodeParent;nodeParent=nodeParent.parent;}
if(nodeParent!==this){nodeParent.merge(nodeMerge);}},merge:function(nodes){var i,l,j,k,node;nodes=toArray(nodes);for(i=0,l=nodes.length;i<l;i++){node=nodes[i];this.addObjectWithoutCheck(node.getObjectsEnd());node.reset(true,true);this.removeNode(node.indexOctant,node);}
this.checkMerge();},checkContract:function(){var i,l,node,nodeObjectsCount,nodeHeaviest,nodeHeaviestObjectsCount,outsideHeaviestObjectsCount;if(this.nodesIndices.length>0){nodeHeaviestObjectsCount=0;outsideHeaviestObjectsCount=this.objects.length;for(i=0,l=this.nodesIndices.length;i<l;i++){node=this.nodesByIndex[this.nodesIndices[i]];nodeObjectsCount=node.getObjectCountEnd();outsideHeaviestObjectsCount+=nodeObjectsCount;if(nodeHeaviest instanceof THREE.OctreeNode===false||nodeObjectsCount>nodeHeaviestObjectsCount){nodeHeaviest=node;nodeHeaviestObjectsCount=nodeObjectsCount;}}
outsideHeaviestObjectsCount-=nodeHeaviestObjectsCount;if(outsideHeaviestObjectsCount<this.tree.objectsThreshold&&nodeHeaviest instanceof THREE.OctreeNode){this.contract(nodeHeaviest);}}},contract:function(nodeRoot){var i,l,node;for(i=0,l=this.nodesIndices.length;i<l;i++){node=this.nodesByIndex[this.nodesIndices[i]];if(node!==nodeRoot){nodeRoot.addObjectWithoutCheck(node.getObjectsEnd());node.reset(true,true);}}
nodeRoot.addObjectWithoutCheck(this.objects);this.reset(false,true);this.tree.setRoot(nodeRoot);nodeRoot.checkContract();},getOctantIndex:function(objectData){var i,l,positionObj,radiusObj,position=this.position,radiusOverlap=this.radiusOverlap,overlap=this.overlap,deltaX,deltaY,deltaZ,distX,distY,distZ,distance,indexOctant=0;if(objectData instanceof THREE.OctreeObjectData){radiusObj=objectData.radius;positionObj=objectData.position;objectData.positionLast.copy(positionObj);}else if(objectData instanceof THREE.OctreeNode){positionObj=objectData.position;radiusObj=0;}
deltaX=positionObj.x-position.x;deltaY=positionObj.y-position.y;deltaZ=positionObj.z-position.z;distX=Math.abs(deltaX);distY=Math.abs(deltaY);distZ=Math.abs(deltaZ);distance=Math.max(distX,distY,distZ);if(distance+radiusObj>radiusOverlap){if(distX+radiusObj>radiusOverlap){indexOctant=indexOctant^(deltaX>0?this.tree.FLAG_POS_X:this.tree.FLAG_NEG_X);}
if(distY+radiusObj>radiusOverlap){indexOctant=indexOctant^(deltaY>0?this.tree.FLAG_POS_Y:this.tree.FLAG_NEG_Y);}
if(distZ+radiusObj>radiusOverlap){indexOctant=indexOctant^(deltaZ>0?this.tree.FLAG_POS_Z:this.tree.FLAG_NEG_Z);}
objectData.indexOctant=-indexOctant-this.tree.INDEX_OUTSIDE_OFFSET;return objectData.indexOctant;}
if(deltaX-radiusObj>-overlap){indexOctant=indexOctant|1;}else if(!(deltaX+radiusObj<overlap)){objectData.indexOctant=this.tree.INDEX_INSIDE_CROSS;return objectData.indexOctant;}
if(deltaY-radiusObj>-overlap){indexOctant=indexOctant|2;}else if(!(deltaY+radiusObj<overlap)){objectData.indexOctant=this.tree.INDEX_INSIDE_CROSS;return objectData.indexOctant;}
if(deltaZ-radiusObj>-overlap){indexOctant=indexOctant|4;}else if(!(deltaZ+radiusObj<overlap)){objectData.indexOctant=this.tree.INDEX_INSIDE_CROSS;return objectData.indexOctant;}
objectData.indexOctant=indexOctant;return objectData.indexOctant;},getOctantIndexFromPosition:function(x,y,z){var indexOctant=0;if(x>0){indexOctant=indexOctant|1;}
if(y>0){indexOctant=indexOctant|2;}
if(z>0){indexOctant=indexOctant|4;}
return indexOctant;},search:function(position,radius,objects,direction,directionPct){var i,l,node,intersects;if(direction){intersects=this.intersectRay(position,direction,radius,directionPct);}else{intersects=this.intersectSphere(position,radius);}
if(intersects===true){objects=objects.concat(this.objects);for(i=0,l=this.nodesIndices.length;i<l;i++){node=this.nodesByIndex[this.nodesIndices[i]];objects=node.search(position,radius,objects,direction);}}
return objects;},intersectSphere:function(position,radius){var distance=radius*radius,px=position.x,py=position.y,pz=position.z;if(px<this.left){distance-=Math.pow(px-this.left,2);}else if(px>this.right){distance-=Math.pow(px-this.right,2);}
if(py<this.bottom){distance-=Math.pow(py-this.bottom,2);}else if(py>this.top){distance-=Math.pow(py-this.top,2);}
if(pz<this.back){distance-=Math.pow(pz-this.back,2);}else if(pz>this.front){distance-=Math.pow(pz-this.front,2);}
return distance>=0;},intersectRay:function(origin,direction,distance,directionPct){if(typeof directionPct==='undefined'){directionPct=this.utilVec31Ray.set(1,1,1).divide(direction);}
var t1=(this.left-origin.x)*directionPct.x,t2=(this.right-origin.x)*directionPct.x,t3=(this.bottom-origin.y)*directionPct.y,t4=(this.top-origin.y)*directionPct.y,t5=(this.back-origin.z)*directionPct.z,t6=(this.front-origin.z)*directionPct.z,tmax=Math.min(Math.min(Math.max(t1,t2),Math.max(t3,t4)),Math.max(t5,t6)),tmin;if(tmax<0)
{return false;}
tmin=Math.max(Math.max(Math.min(t1,t2),Math.min(t3,t4)),Math.min(t5,t6));if(tmin>tmax||tmin>distance){return false;}
return true;},getDepthEnd:function(depth){var i,l,node;if(this.nodesIndices.length>0){for(i=0,l=this.nodesIndices.length;i<l;i++){node=this.nodesByIndex[this.nodesIndices[i]];depth=node.getDepthEnd(depth);}}else{depth=!depth||this.depth>depth?this.depth:depth;}
return depth;},getNodeCountEnd:function(){return this.tree.root.getNodeCountRecursive()+1;},getNodeCountRecursive:function(){var i,l,count=this.nodesIndices.length;for(i=0,l=this.nodesIndices.length;i<l;i++){count+=this.nodesByIndex[this.nodesIndices[i]].getNodeCountRecursive();}
return count;},getObjectsEnd:function(objects){var i,l,node;objects=(objects||[]).concat(this.objects);for(i=0,l=this.nodesIndices.length;i<l;i++){node=this.nodesByIndex[this.nodesIndices[i]];objects=node.getObjectsEnd(objects);}
return objects;},getObjectCountEnd:function(){var i,l,count=this.objects.length;for(i=0,l=this.nodesIndices.length;i<l;i++){count+=this.nodesByIndex[this.nodesIndices[i]].getObjectCountEnd();}
return count;},getObjectCountStart:function(){var count=this.objects.length,parent=this.parent;while(parent instanceof THREE.OctreeNode){count+=parent.objects.length;parent=parent.parent;}
return count;},toConsole:function(space){var i,l,node,spaceAddition='   ';space=typeof space==='string'?space:spaceAddition;console.log((this.parent?space+' octree NODE > ':' octree ROOT > '),this,' // id: ',this.id,' // indexOctant: ',this.indexOctant,' // position: ',this.position.x,this.position.y,this.position.z,' // radius: ',this.radius,' // depth: ',this.depth);console.log((this.parent?space+' ':' '),'+ objects ( ',this.objects.length,' ) ',this.objects);console.log((this.parent?space+' ':' '),'+ children ( ',this.nodesIndices.length,' )',this.nodesIndices,this.nodesByIndex);for(i=0,l=this.nodesIndices.length;i<l;i++){node=this.nodesByIndex[this.nodesIndices[i]];node.toConsole(space+spaceAddition);}}};THREE.Raycaster.prototype.intersectOctreeObject=function(object,recursive){var intersects,octreeObject,facesAll,facesSearch;if(object.object instanceof THREE.Object3D){octreeObject=object;object=octreeObject.object;facesSearch=octreeObject.faces;facesAll=object.geometry.faces;if(facesSearch.length>0){object.geometry.faces=facesSearch;}
intersects=this.intersectObject(object,recursive);if(facesSearch.length>0){object.geometry.faces=facesAll;}}else{intersects=this.intersectObject(object,recursive);}
return intersects;};THREE.Raycaster.prototype.intersectOctreeObjects=function(objects,recursive){var i,il,intersects=[];for(i=0,il=objects.length;i<il;i++){intersects=intersects.concat(this.intersectOctreeObject(objects[i],recursive));}
return intersects;};}(THREE));